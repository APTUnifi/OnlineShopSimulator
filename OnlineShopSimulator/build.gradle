/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.1/userguide/java_library_plugin.html
 */
 
// CONFIGURATION

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'org.sonarqube' version '2.7'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id 'com.gradle.build-scan' version '2.1'	
}

repositories {
    jcenter()
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/it/java')
        }
        resources.srcDir file('src/it/resources')
    }
    e2eTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/e2e/java')
        }
    }
}

configurations { 
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
    
    e2eTestCompile.extendsFrom testCompile
    e2eTestRuntime.extendsFrom testRuntime
    e2eTestImplementation.extendsFrom testImplementation
}

dependencies {
    api 'org.apache.commons:commons-math3:3.6.1'
    implementation 'com.google.guava:guava:28.0-jre'
    compile 'org.mongodb:mongodb-driver:3.11.1'
    compile 'org.testcontainers:testcontainers:1.12.3'
    compile 'info.picocli:picocli:4.1.2'
    runtime 'org.slf4j:slf4j-simple:2.0.0-alpha1'
    testImplementation 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-swing-junit:3.9.2'
    testCompile 'org.mockito:mockito-core:2.23.4'	
    testCompile 'de.bwaldvogel:mongo-java-server:1.21.0'
}

// TASKS

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}
task e2eTest(type: Test) {
    testClassesDirs = sourceSets.e2eTest.output.classesDirs
    classpath = sourceSets.e2eTest.runtimeClasspath
}

task app(type: Jar) {
  manifest {
    attributes(
      'Main-Class': 'com.online.shop.app.swing.ShopOnlineApp',
    )
  }
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
  with jar
}

jacocoTestReport {	
	executionData(file("${buildDir}/jacoco/test.exec"), file("${buildDir}/jacoco/integrationTest.exec"), file("${buildDir}/jacoco/e2eTest.exec"))
	
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        xml.destination file("${buildDir}/coverallsXML")
    }
    
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'com/online/shop/model/**')
        })
    }
}

coveralls {
    jacocoReportPath "${buildDir}/coverallsXML"
}

sonarqube {
  	properties {
        property "sonar.projectKey", "APTUnifi_OnlineShopSimulator"
        property "sonar.coverage.jacoco.xmlReportPaths", jacocoTestReport.reports.xml.destination
        property "sonar.coverage.jacoco.xmlReportPaths", jacocoTestReport.reports.xml.destination
        property "sonar.sources", "src/main/java"
        property "sonar.exclusions", "**/com/online/shop/model"
    }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test
check.dependsOn e2eTest
e2eTest.mustRunAfter integrationTest
project.tasks["sonarqube"].dependsOn "jacocoTestReport"

//This task is essential for skipping the terms of service terminal procedure
buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}
